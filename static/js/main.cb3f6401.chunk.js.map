{"version":3,"sources":["Form.js","Map.js","LocationButton.js","Locations.js","Directions.js","GeolocationLoading.js","IntroDescription.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","react_default","a","createElement","onSubmit","search","className","type","name","placeholder","required","pattern","title","value","base","onChange","handleInput","disabled","usingCurrent","htmlFor","id","getCurrentLocation","searchTerm","toggleTouristMode","min","aria-valuemin","max","aria-valuemax","step","range","onMouseUp","onTouchEnd","onKeyDown","handleEnter","updateSliderRange","Map","src","url","alt","style","LocationButton","setDestination","index","address","highlightedLocations","touristMode","duplicateNames","onClick","Locations","areSearchResultsEmpty","searchResults","map","location","src_LocationButton","key","Directions","directions","direction","Intro","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","e","setState","defineProperty","target","state","keyCode","length","getLocationsMapImage","displayRoute","asyncToGenerator","regenerator_default","mark","_callee","data","wrap","_context","prev","next","Axios","get","params","APIKEY","from","to","destination","sent","route","legs","maneuvers","steps","narrative","t0","console","log","stop","streetArrayToString","reduce","result","current","includes","replace","getDuplicateIndex","duplicate","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","done","err","return","navigator","geolocation","getCurrentPosition","position","baseGeoLocation","coords","latitude","longitude","reverseGeo","concat","alert","showDirections","getRouteMapImage","geoLocation","_ref2","_callee2","_data$data$results$0$","lat","lng","_context2","results","locations","latLng","_x","apply","arguments","_ref3","_callee3","reverseAddressResult","_context3","geolocationLoadingStyle","displayShow","street","adminArea5","adminArea3","displayNone","_x2","_ref4","_callee4","_context4","preventDefault","sort","circle","q","pageSize","displayString","slice","Math","floor","showInfo","intro","locationListRef","scrollIntoView","behavior","block","_x3","_callee5","_context5","mapLoadingStyle","method","responseType","scalebar","shape","size","mapImageURL","URL","createObjectURL","_callee6","_context6","display","start","end","process","React","createRef","highlightButtonElement","document","getElementById","topOffset","offsetTop","offsetHeight","scrollTop","IntroDescription","src_Form","GeolocationLoading","ref","src_Locations","src_Map","src_Directions","Component","Boolean","window","hostname","match","ReactDOM","render","src_App_0","serviceWorker","ready","then","registration","unregister"],"mappings":"iTA8FeA,MA5Ff,SAAeC,GACb,OACEC,EAAAC,EAAAC,cAAA,QAAMC,SAAUJ,EAAMK,OAAQC,UAAU,aACtCL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,eACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iCACbL,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,SACEI,KAAK,OACLC,KAAK,OACLC,YAAY,8BACZC,UAAQ,EACRC,QAAQ,aACRC,MAAM,0CACNC,MAAOb,EAAMc,KACbC,SAAUf,EAAMgB,YAChBC,SAAUjB,EAAMkB,eAElBjB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACbL,EAAAC,EAAAC,cAAA,SAAOgB,QAAQ,mBAAmBb,UAAU,sBAC1CL,EAAAC,EAAAC,cAAA,SACEiB,GAAG,mBACHb,KAAK,WACLD,UAAU,WACVS,SAAUf,EAAMqB,qBAElBpB,EAAAC,EAAAC,cAAA,SAAOgB,QAAQ,mBAAmBb,UAAU,eAA5C,2BAONL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,kCACbL,EAAAC,EAAAC,cAAA,yCACAF,EAAAC,EAAAC,cAAA,SACEI,KAAK,OACLC,KAAK,aACLC,YAAY,yBACZC,UAAQ,EACRE,MAAM,0CACND,QAAQ,aACRE,MAAOb,EAAMsB,WACbP,SAAUf,EAAMgB,cAElBf,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACbL,EAAAC,EAAAC,cAAA,SAAOgB,QAAQ,eAAeb,UAAU,sBACtCL,EAAAC,EAAAC,cAAA,SACEiB,GAAG,eACHb,KAAK,WACLD,UAAU,WACVS,SAAUf,EAAMuB,oBAElBtB,EAAAC,EAAAC,cAAA,SAAOgB,QAAQ,eAAeb,UAAU,eAAxC,eAEEL,EAAAC,EAAAC,cAAA,KAAGG,UAAU,WAAb,kEAQRL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iCACbL,EAAAC,EAAAC,cAAA,mCACAF,EAAAC,EAAAC,cAAA,SACEI,KAAK,QACLC,KAAK,QACLF,UAAU,eACVkB,IAAI,OACJC,gBAAc,OACdC,IAAI,QACJC,gBAAc,QACdC,KAAK,OACLf,MAAOb,EAAM6B,MACbC,UAAW9B,EAAMgB,YACjBe,WAAY/B,EAAMgB,YAClBgB,UAAWhC,EAAMiC,YACjBlB,SAAUf,EAAMkC,oBAElBjC,EAAAC,EAAAC,cAAA,UAAKH,EAAM6B,MAAQ,IAAnB,QAIJ5B,EAAAC,EAAAC,cAAA,OAAKG,UAAU,eACbL,EAAAC,EAAAC,cAAA,UAAQI,KAAK,SAASa,GAAG,iBAAzB,aCzEOe,MAXf,SAAanC,GACX,OACEC,EAAAC,EAAAC,cAAA,OAAKG,UAAU,eACbL,EAAAC,EAAAC,cAAA,OAAKiC,IAAKpC,EAAMqC,IAAKC,IAAI,uCACzBrC,EAAAC,EAAAC,cAAA,OAAKG,UAAU,gBAAgBiC,MAAOvC,EAAMuC,OAC1CtC,EAAAC,EAAAC,cAAA,iCCsBOqC,MA3Bf,SAAwBxC,GAAO,IACrByC,EAA4FzC,EAA5FyC,eAAgBC,EAA4E1C,EAA5E0C,MAAOlC,EAAqER,EAArEQ,KAAMmC,EAA+D3C,EAA/D2C,QAASC,EAAsD5C,EAAtD4C,qBAAsBC,EAAgC7C,EAAhC6C,YAAaC,EAAmB9C,EAAnB8C,eAEjF,OACE7C,EAAAC,EAAAC,cAAA,UACE4C,QAAS,WAAQN,EAAeE,IAChCrC,UACEsC,EAAqB,KAAOF,GAASE,EAAqB,KAAOF,EAC7D,qBACAG,GAAeC,EAAetC,GAAQ,EACpC,sBACA,GAERY,GACEwB,EAAqB,KAAOF,EACxB,sBACAG,GAAeC,EAAetC,GAAQ,EACpC,kBACA,IAGRP,EAAAC,EAAAC,cAAA,UAAKK,GACLP,EAAAC,EAAAC,cAAA,SAAIwC,KCOKK,MA5Bf,SAAoBhD,GAClB,OACEC,EAAAC,EAAAC,cAAA,OAAKG,UAAU,gBAAgBc,GAAG,oBAC/BpB,EAAMiD,sBACLhD,EAAAC,EAAAC,cAAA,KAAGG,UAAU,yBAAb,6FAIE,KAEHN,EAAMkD,cAAcC,IAAI,SAACC,EAAUV,GAClC,OACEzC,EAAAC,EAAAC,cAACkD,EAAD,CACEC,IAAKZ,EAAQU,EAAST,QACtBF,eAAgBzC,EAAMyC,eACtBC,MAAOA,EACPlC,KAAM4C,EAAS5C,KACfmC,QAASS,EAAST,QAClBC,qBAAsB5C,EAAM4C,qBAC5BC,YAAa7C,EAAM6C,YACnBC,eAAgB9C,EAAM8C,qBCNnBS,MAff,SAAqBvD,GACnB,OACEC,EAAAC,EAAAC,cAAA,OAAKG,UAAU,uBACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,mBACbL,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,UACGH,EAAMwD,WAAWL,IAAI,SAACM,EAAWf,GAAZ,OACpBzC,EAAAC,EAAAC,cAAA,MAAImD,IAAKZ,GAAQe,SCCdtB,MARf,SAAanC,GACX,OACEC,EAAAC,EAAAC,cAAA,OAAKG,UAAU,4BAA4BiC,MAAOvC,EAAMuC,OACxDtC,EAAAC,EAAAC,cAAA,kDCaWuD,MAhBf,SAAgB1D,GACd,OACEC,EAAAC,EAAAC,cAAA,OAAKG,UAAU,cAAciC,MAAOvC,EAAMuC,OACxCtC,EAAAC,EAAAC,cAAA,6DACmDF,EAAAC,EAAAC,cAAA,iBADnD,uaCocSwD,qBA9bb,SAAAA,IAAe,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACbC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QA+BF/C,YAAc,SAAAmD,GACZP,EAAKQ,SAALP,OAAAQ,EAAA,EAAAR,CAAA,GACGM,EAAEG,OAAO9D,KAAO2D,EAAEG,OAAOzD,QAEN,UAAlBsD,EAAEG,OAAO9D,MAAoBoD,EAAKW,MAAMzD,MAAQ8C,EAAKW,MAAMjD,YAC7DsC,EAAKvD,UArCMuD,EAyCf1B,kBAAoB,SAAAiC,GAClBP,EAAKQ,SAALP,OAAAQ,EAAA,EAAAR,CAAA,GACGM,EAAEG,OAAO9D,KAAO2D,EAAEG,OAAOzD,SA3Cf+C,EA+Cf3B,YAAc,SAAAkC,GACM,KAAdA,EAAEK,SACJZ,EAAK5C,YAAYmD,IAjDNP,EAqDfrC,kBAAoB,SAAA4C,GAClBP,EAAKQ,SACH,CACEvB,aAAce,EAAKW,MAAM1B,aAE3B,WACMe,EAAKW,MAAMrB,cAAcuB,OAAS,GACpCb,EAAKc,0BA5DEd,EAmEfe,aAnEed,OAAAe,EAAA,EAAAf,CAAAgB,EAAA3E,EAAA4E,KAmEA,SAAAC,IAAA,IAAAC,EAAAxB,EAAA,OAAAqB,EAAA3E,EAAA+E,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEQC,IAAMC,IACvB,iDACA,CACEC,OAAQ,CACNjC,IAAKM,EAAK4B,OACVC,KAAM7B,EAAKW,MAAMzD,KACjB4E,GAAI9B,EAAKW,MAAMoB,eARV,OAELX,EAFKE,EAAAU,KAaLpC,EAAawB,EAAKA,KAAKa,MAAMC,KAAK,GAAGC,UAAU5C,IACnD,SAAA6C,GAAK,OAAIA,EAAMC,YAEjBrC,EAAKQ,SAAS,CACZZ,eAjBS0B,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAgB,GAAAhB,EAAA,SAoBXiB,QAAQC,IAAI,qBApBD,yBAAAlB,EAAAmB,SAAAtB,EAAA,iBAnEAnB,EA4Ff0C,oBAAsB,WACpB,OAAO1C,EAAKW,MAAMrB,cACfqD,OAAO,SAACC,EAAQC,EAAS/D,GACxB,OAAIkB,EAAKW,MAAM3B,qBAAqB8D,SAAShE,GACpC8D,EAASC,EAAQ9D,QAAU,qBAElCiB,EAAKW,MAAM1B,aACXe,EAAKW,MAAMzB,eAAe2D,EAAQjG,MAAQ,EAEnCgG,EAASC,EAAQ9D,QAAU,mBAE3B6D,EAASC,EAAQ9D,QAAU,MAEnC,IACFgE,QAAQ,IAAK,MA1GH/C,EA8GfgD,kBAAoB,WAClB,IAAMC,EAAY,GADMC,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAGxB,QAAAC,EAAAC,EAAqBvD,EAAKW,MAAMrB,cAAhCkE,OAAAC,cAAAP,GAAAI,EAAAC,EAAA/B,QAAAkC,MAAAR,GAAA,EAA+C,KAAtC1D,EAAsC8D,EAAArG,MAC7CgG,EAAUzD,EAAS5C,MAAQqG,EAAUzD,EAAS5C,MAC1CqG,EAAUzD,EAAS5C,MAAQ,EAC3B,GANkB,MAAA+G,GAAAR,GAAA,EAAAC,EAAAO,EAAA,YAAAT,GAAA,MAAAK,EAAAK,QAAAL,EAAAK,SAAA,WAAAT,EAAA,MAAAC,GASxBpD,EAAKQ,SAAS,CACZtB,eAAgB+D,KAxHLjD,EA6HfvC,mBAAqB,WACnBuC,EAAKQ,SAAS,CACZlD,cAAe0C,EAAKW,MAAMrD,eAGxBuG,UAAUC,YACZD,UAAUC,YAAYC,mBAAmB,SAAAC,GACvChE,EAAKQ,SAAS,CACZyD,gBAAiB,CACfD,EAASE,OAAOC,SAChBH,EAASE,OAAOE,aAIpBpE,EAAKqE,WAAL,GAAAC,OACKN,EAASE,OAAOC,SADrB,KAAAG,OACiCN,EAASE,OAAOE,cAInDG,MAAM,kDAhJKvE,EAqJfnB,eAAiB,SAAAE,GACfiB,EAAKQ,SACH,CACEuB,YAAahD,EACbyF,gBAAgB,GAElB,WACExE,EAAKyE,mBACLzE,EAAKe,kBA7JIf,EAmKf0E,YAnKe,eAAAC,EAAA1E,OAAAe,EAAA,EAAAf,CAAAgB,EAAA3E,EAAA4E,KAmKD,SAAA0D,EAAMpF,GAAN,IAAA4B,EAAAyD,EAAAC,EAAAC,EAAA,OAAA9D,EAAA3E,EAAA+E,KAAA,SAAA2D,GAAA,cAAAA,EAAAzD,KAAAyD,EAAAxD,MAAA,cAAAwD,EAAAzD,KAAA,EAAAyD,EAAAxD,KAAA,EAESC,IAAMC,IACvB,kDACA,CACEC,OAAQ,CACNjC,IAAKM,EAAK4B,OACVpC,SAAUA,KAPN,OAEJ4B,EAFI4D,EAAAhD,KAAA6C,EAYWzD,EAAKA,KAAK6D,QAAQ,GAAGC,UAAU,GAAGC,OAA/CL,EAZED,EAYFC,IAAKC,EAZHF,EAYGE,IACb/E,EAAKQ,SAAS,CACZyD,gBAAiB,CAACa,EAAKC,KAdfC,EAAAxD,KAAA,gBAAAwD,EAAAzD,KAAA,EAAAyD,EAAA1C,GAAA0C,EAAA,SAiBVzC,QAAQC,IAAI,4BAjBF,yBAAAwC,EAAAvC,SAAAmC,EAAA,iBAnKC,gBAAAQ,GAAA,OAAAT,EAAAU,MAAAlF,KAAAmF,YAAA,GAAAtF,EA0LfqE,WA1Le,eAAAkB,EAAAtF,OAAAe,EAAA,EAAAf,CAAAgB,EAAA3E,EAAA4E,KA0LF,SAAAsE,EAAMhG,GAAN,IAAA4B,EAAAqE,EAAA,OAAAxE,EAAA3E,EAAA+E,KAAA,SAAAqE,GAAA,cAAAA,EAAAnE,KAAAmE,EAAAlE,MAAA,WAEqB,IAA5BxB,EAAKW,MAAMrD,aAFJ,CAAAoI,EAAAlE,KAAA,gBAITxB,EAAKQ,SAAS,CACZmF,wBAAyB3F,EAAK4F,cALvBF,EAAAnE,KAAA,EAAAmE,EAAAlE,KAAA,EASYC,IAAMC,IACvB,kDACA,CACEC,OAAQ,CACNjC,IAAKM,EAAK4B,OACVpC,SAAUA,KAdT,OASD4B,EATCsE,EAAA1D,KAoBDyD,EAAuBrE,EAAKA,KAAK6D,QAAQ,GAAGC,UAAU,GAE5DlF,EAAKQ,SAAS,CACZtD,KACEuI,EAAqBI,OACrB,KACAJ,EAAqBK,WACrB,KACAL,EAAqBM,WACvBJ,wBAAyB3F,EAAKgG,cA7BzBN,EAAAlE,KAAA,iBAAAkE,EAAAnE,KAAA,GAAAmE,EAAApD,GAAAoD,EAAA,SAgCPnB,MAAM,wDACNvE,EAAKQ,SAAS,CACZmF,wBAAyB3F,EAAKgG,cAlCzB,yBAAAN,EAAAjD,SAAA+C,EAAA,kBA1LE,gBAAAS,GAAA,OAAAV,EAAAF,MAAAlF,KAAAmF,YAAA,GAAAtF,EAoOfvD,OApOe,eAAAyJ,EAAAjG,OAAAe,EAAA,EAAAf,CAAAgB,EAAA3E,EAAA4E,KAoON,SAAAiF,EAAM5F,GAAN,IAAAa,EAAA6D,EAAAjG,EAAA,OAAAiC,EAAA3E,EAAA+E,KAAA,SAAA+E,GAAA,cAAAA,EAAA7E,KAAA6E,EAAA5E,MAAA,cACHjB,GACFA,EAAE8F,iBAGJrG,EAAKQ,SAAS,CACZZ,WAAY,KANPwG,EAAA7E,KAAA,EAAA6E,EAAA5E,KAAA,EAWCxB,EAAK0E,YAAY1E,EAAKW,MAAMzD,MAX7B,cAAAkJ,EAAA5E,KAAA,EAaYC,IAAMC,IACrB,8CACA,CACEC,OAAQ,CACNjC,IAAKM,EAAK4B,OACV0E,KAAM,YACNC,OAAM,GAAAjC,OAAKtE,EAAKW,MAAMsD,gBAAgB,GAAhC,MAAAK,OACJtE,EAAKW,MAAMsD,gBAAgB,GADvB,MAAAK,OAEDtE,EAAKW,MAAM1C,OAChBuI,EAAGxG,EAAKW,MAAMjD,WACd+I,SAAU,MAvBX,OAaDrF,EAbCgF,EAAApE,KAqCkB,KARjBiD,EAAU7D,EAAKA,KAAK6D,QAAQ1F,IAAI,SAAAC,GACpC,MAAO,CACL5C,KAAM4C,EAAS5C,KACfmC,QAASS,EAASkH,cAAcC,MAAMnH,EAAS5C,KAAKiE,OAAS,OAKrDA,OACVb,EAAKQ,SAAS,CACZnB,uBAAuB,IAGzBW,EAAKQ,SAAS,CACZnB,uBAAuB,IAKvBL,EAAuB,CAAC,KAAM,MAGhCA,EADEiG,EAAQpE,OAAS,IAAM,EACF,CAACoE,EAAQpE,OAAS,EAAI,EAAGoE,EAAQpE,OAAS,GAE1C,CAAC+F,KAAKC,MAAM5B,EAAQpE,OAAS,IAGtDb,EAAKQ,SAAS,CACZlB,cAAe2F,EACfjG,qBAAsBA,EACtB8H,UAAU,EACVC,MAAO/G,EAAKgG,cAGdhG,EAAKgH,gBAAgBnE,QAAQoE,eAAe,CAC1CC,SAAU,SACVC,MAAO,YAGTnH,EAAKgD,oBACLhD,EAAKc,uBArEAsF,EAAA5E,KAAA,iBAAA4E,EAAA7E,KAAA,GAAA6E,EAAA9D,GAAA8D,EAAA,SAuEL7B,MAAM,gDAvED,yBAAA6B,EAAA3D,SAAA0D,EAAA,kBApOM,gBAAAiB,GAAA,OAAAlB,EAAAb,MAAAlF,KAAAmF,YAAA,GAAAtF,EAgTfc,qBAhTeb,OAAAe,EAAA,EAAAf,CAAAgB,EAAA3E,EAAA4E,KAgTQ,SAAAmG,IAAA,IAAAjG,EAAA,OAAAH,EAAA3E,EAAA+E,KAAA,SAAAiG,GAAA,cAAAA,EAAA/F,KAAA+F,EAAA9F,MAAA,cAErBxB,EAAKQ,SAAS,CACZ+G,gBAAiBvH,EAAK4F,cAHH0B,EAAA/F,KAAA,EAAA+F,EAAA9F,KAAA,EAOAC,IAAM,CACvB+F,OAAQ,MACR/I,IAAK,+CACLgJ,aAAc,OACd9F,OAAQ,CACNjC,IAAKM,EAAK4B,OACVsD,UACElF,EAAK0C,sBAAwB1C,EAAKW,MAAMzD,KAAO,cACjDwK,SAAU,cACVC,MAAO,UAAArD,OAAUtE,EAAKW,MAAM1C,MAAQ,IAA7B,MAAwC,IAAM+B,EAAKW,MAAMzD,KAChE0K,KAAM,aAjBS,OAObxG,EAPakG,EAAAtF,KAoBnBhC,EAAKQ,SAAS,CACZqH,YAAaC,IAAIC,gBAAgB3G,EAAKA,MAEtCmG,gBAAiBvH,EAAKgG,cAvBLsB,EAAA9F,KAAA,gBAAA8F,EAAA/F,KAAA,EAAA+F,EAAAhF,GAAAgF,EAAA,SA0BnB/C,MAAM,kCACNvE,EAAKQ,SAAS,CACZ+G,gBAAiBvH,EAAKgG,cA5BL,yBAAAsB,EAAA7E,SAAA4E,EAAA,iBAhTRrH,EAkVfyE,iBAlVexE,OAAAe,EAAA,EAAAf,CAAAgB,EAAA3E,EAAA4E,KAkVI,SAAA8G,IAAA,IAAA5G,EAAA,OAAAH,EAAA3E,EAAA+E,KAAA,SAAA4G,GAAA,cAAAA,EAAA1G,KAAA0G,EAAAzG,MAAA,cAEjBxB,EAAKQ,SAAS,CACZ+G,gBAAiB,CACfW,QAAS,WAJID,EAAA1G,KAAA,EAAA0G,EAAAzG,KAAA,EAQIC,IAAM,CACvB+F,OAAQ,MACR/I,IAAK,+CACLgJ,aAAc,OACd9F,OAAQ,CACNjC,IAAKM,EAAK4B,OACVuG,MAAOnI,EAAKW,MAAMzD,KAAO,cACzBkL,IAAKpI,EAAKW,MAAMoB,YAAc,YAC9B2F,SAAU,cACVE,KAAM,aAjBK,OAQTxG,EARS6G,EAAAjG,KAoBfhC,EAAKQ,SAAS,CACZqH,YAAaC,IAAIC,gBAAgB3G,EAAKA,MAEtCmG,gBAAiB,CACfW,QAAS,UAxBED,EAAAzG,KAAA,gBAAAyG,EAAA1G,KAAA,EAAA0G,EAAA3F,GAAA2F,EAAA,SA4Bf1D,MAAM,8BA5BS,yBAAA0D,EAAAxF,SAAAuF,EAAA,iBA/UjBhI,EAAK4B,OAASyG,mCACdrI,EAAKgG,YAAc,CAAEkC,QAAS,QAC9BlI,EAAK4F,YAAc,CAAEsC,QAAS,SAC9BlI,EAAKgH,gBAAkBsB,IAAMC,YAG7BvI,EAAKW,MAAQ,CACXzD,KAAM,GACNI,cAAc,EACdI,WAAY,GACZO,MAAO,IACPgG,gBAAiB,GACjB3E,cAAe,GACfuI,YAAa,GACb9F,YAAa,GACb/C,qBAAsB,CAAC,KAAM,MAC7BY,WAAY,GACZP,uBAAuB,EACvBkI,gBAAiBvH,EAAKgG,YACtBL,wBAAyB3F,EAAKgG,YAC9Bc,UAAU,EACVtC,gBAAgB,EAChBvF,aAAa,EACbC,eAAgB,GAChB6H,MAAO/G,EAAK4F,aA3BD5F,oFAoXb,GAAIG,KAAKQ,MAAMrB,cAAcuB,OAAS,EAAG,CAEvC,IAAI2H,EAAyBC,SAASC,eACpC,uBAIEC,EACFH,EAAuBI,UACe,EAAtCJ,EAAuBK,aAGzBJ,SAASC,eAAe,oBAAoBI,UAAYH,oCAK1D,OACEtM,EAAAC,EAAAC,cAAA,OAAKG,UAAU,WACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,wBAAeF,EAAAC,EAAAC,cAAA,8BAGjBF,EAAAC,EAAAC,cAACwM,EAAD,CAAOpK,MAAOwB,KAAKQ,MAAMoG,QACzB1K,EAAAC,EAAAC,cAAA,OAAKG,UAAU,wBACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,kBACbL,EAAAC,EAAAC,cAACyM,EAAD,CACEvM,OAAQ0D,KAAK1D,OACbS,KAAMiD,KAAKQ,MAAMzD,KACjBI,aAAc6C,KAAKQ,MAAMrD,aACzBW,MAAOkC,KAAKQ,MAAM1C,MAClBb,YAAa+C,KAAK/C,YAClBiB,YAAa8B,KAAK9B,YAClBC,kBAAmB6B,KAAK7B,kBACxBb,mBAAoB0C,KAAK1C,mBACzBC,WAAYyC,KAAKQ,MAAMjD,WACvBC,kBAAmBwC,KAAKxC,oBAE1BtB,EAAAC,EAAAC,cAAC0M,EAAD,CAAoBtK,MAAOwB,KAAKQ,MAAMgF,2BAEvCxF,KAAKQ,MAAMmG,SACVzK,EAAAC,EAAAC,cAAA,OAAKG,UAAU,oBAAoBwM,IAAK/I,KAAK6G,iBAC3C3K,EAAAC,EAAAC,cAAA,OAAKG,UAAU,qBACbL,EAAAC,EAAAC,cAAC4M,EAAD,CACEtK,eAAgBsB,KAAKtB,eACrBS,cAAea,KAAKQ,MAAMrB,cAC1BN,qBAAsBmB,KAAKQ,MAAM3B,qBACjCC,YAAakB,KAAKQ,MAAM1B,YACxBC,eAAgBiB,KAAKQ,MAAMzB,eAC3BG,sBAAuBc,KAAKQ,MAAMtB,wBAGpChD,EAAAC,EAAAC,cAAC6M,EAAD,CACE3K,IAAK0B,KAAKQ,MAAMkH,YAChBlJ,MAAOwB,KAAKQ,MAAM4G,gBAClBtI,YAAakB,KAAKQ,MAAM1B,eAI3BkB,KAAKQ,MAAM6D,gBACVrE,KAAKQ,MAAMf,WAAWiB,OAAS,EAC7BxE,EAAAC,EAAAC,cAAC8M,EAAD,CAAYzJ,WAAYO,KAAKQ,MAAMf,aAEnC,MAEJ,eAvbE0J,cCEEC,QACW,cAA7BC,OAAOhK,SAASiK,UAEe,UAA7BD,OAAOhK,SAASiK,UAEhBD,OAAOhK,SAASiK,SAASC,MACvB,2DCZNC,IAASC,OAAOvN,EAAAC,EAAAC,cAACsN,EAAD,MAASpB,SAASC,eAAe,SD2H3C,kBAAmB7E,WACrBA,UAAUiG,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.cb3f6401.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Form (props) {\r\n  return (\r\n    <form onSubmit={props.search} className='form-flex'>\r\n      <div className='form-inputs'>\r\n        <div className='start-input-group input-group'>\r\n          <h2>Where are you?</h2>\r\n          <input\r\n            type='text'\r\n            name='base'\r\n            placeholder='ex. 483 Queen St W, Toronto'\r\n            required\r\n            pattern='\\S.{0,40}'\r\n            title='No empty space in the beginning please.'\r\n            value={props.base}\r\n            onChange={props.handleInput}\r\n            disabled={props.usingCurrent}\r\n          />\r\n          <div className='check-contain'>\r\n            <label htmlFor='current-location' className='checkbox-container'>\r\n              <input\r\n                id='current-location'\r\n                type='checkbox'\r\n                className='checkbox'\r\n                onChange={props.getCurrentLocation}\r\n              />\r\n              <label htmlFor='current-location' className='check-label'>\r\n                Use Current Location\r\n              </label>\r\n            </label>\r\n          </div>\r\n        </div>\r\n\r\n        <div className='search-input-group input-group'>\r\n          <h2>Where would you like to go?</h2>\r\n          <input\r\n            type='text'\r\n            name='searchTerm'\r\n            placeholder=\"ex. cafe, Tim Horton's\"\r\n            required\r\n            title='No empty space in the beginning please.'\r\n            pattern='\\S.{0,40}'\r\n            value={props.searchTerm}\r\n            onChange={props.handleInput}\r\n          />\r\n          <div className='check-contain'>\r\n            <label htmlFor='tourist-mode' className='checkbox-container'>\r\n              <input\r\n                id='tourist-mode'\r\n                type='checkbox'\r\n                className='checkbox'\r\n                onChange={props.toggleTouristMode}\r\n              />\r\n              <label htmlFor='tourist-mode' className='check-label'>\r\n                Tourist Mode\r\n                <p className='tourist'>\r\n                  (highlights multiple instances of the same name in yellow)\r\n                </p>\r\n              </label>\r\n            </label>\r\n          </div>\r\n        </div>\r\n\r\n        <div className='range-input-group input-group'>\r\n          <h2>How far would you go?</h2>\r\n          <input\r\n            type='range'\r\n            name='range'\r\n            className='range-slider'\r\n            min='1000'\r\n            aria-valuemin='1000'\r\n            max='20000'\r\n            aria-valuemax='20000'\r\n            step='1000'\r\n            value={props.range}\r\n            onMouseUp={props.handleInput}\r\n            onTouchEnd={props.handleInput}\r\n            onKeyDown={props.handleEnter}\r\n            onChange={props.updateSliderRange}\r\n          />\r\n          <h4>{props.range / 1000}km</h4>\r\n        </div>\r\n      </div>\r\n\r\n      <div className='form-button'>\r\n        <button type='submit' id='submit-search'>\r\n          Submit\r\n        </button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default Form\r\n","import React from 'react';\r\n\r\nfunction Map(props) {\r\n  return(\r\n    <div className=\"map-markers\">\r\n      <img src={props.url} alt=\"Map indicating the search results.\"/>\r\n      <div className=\"loading-popup\" style={props.style}>\r\n        <p>Retrieving Map...</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map;","import React from 'react';\r\n\r\nfunction LocationButton(props) {\r\n  const { setDestination, index, name, address, highlightedLocations, touristMode, duplicateNames } = props\r\n\r\n  return (\r\n    <button\r\n      onClick={() => { setDestination(address) }}\r\n      className={\r\n        highlightedLocations[0] === index || highlightedLocations[1] === index\r\n          ? \"highlighted-button\"\r\n          : touristMode && duplicateNames[name] > 1\r\n            ? \"tourist-mode-button\"\r\n            : \"\"\r\n      }\r\n      id={\r\n        highlightedLocations[0] === index\r\n          ? \"button-highlight-id\"\r\n          : touristMode && duplicateNames[name] > 1\r\n            ? \"tourist-mode-id\"\r\n            : \"\"\r\n      }\r\n    >\r\n      <h4>{name}</h4>\r\n      <p>{address}</p>\r\n    </button>\r\n  )\r\n}\r\n\r\nexport default LocationButton;","import React from 'react'\r\nimport LocationButton from './LocationButton.js'\r\n\r\nfunction Locations (props) {\r\n  return (\r\n    <div className='location-list' id='location-list-id'>\r\n      {props.areSearchResultsEmpty ? (\r\n        <p className='no-results-found-text'>\r\n          No search results found. Try searching for something a little less\r\n          creative. 😒\r\n        </p>\r\n      ) : null}\r\n\r\n      {props.searchResults.map((location, index) => {\r\n        return (\r\n          <LocationButton\r\n            key={index + location.address}\r\n            setDestination={props.setDestination}\r\n            index={index}\r\n            name={location.name}\r\n            address={location.address}\r\n            highlightedLocations={props.highlightedLocations}\r\n            touristMode={props.touristMode}\r\n            duplicateNames={props.duplicateNames}\r\n          />\r\n        )\r\n      })}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Locations\r\n","import React from 'react'\r\n\r\nfunction Directions (props) {\r\n  return (\r\n    <div className='direction-container'>\r\n      <div className='directions-list'>\r\n        <h3>Directions</h3>\r\n        <ol>\r\n          {props.directions.map((direction, index) => (\r\n            <li key={index}>{direction}</li>\r\n          ))}\r\n        </ol>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Directions\r\n","import React from 'react';\r\n\r\nfunction Map(props) {\r\n  return(\r\n    <div className=\"geolocator-loading-prompt\" style={props.style}>\r\n    <p>Finding your approximate address...</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map;","import React from 'react'\r\n\r\nfunction Intro (props) {\r\n  return (\r\n    <div className='description' style={props.style}>\r\n      <p>\r\n        Want to check out a new place, but not somewhere <em>too</em> great? Do\r\n        you long for the days when you weren't excited about anything? This app\r\n        is for you! Pick your location, then search for something you're\r\n        interested in. You'll get the most middle-of-the-road place we can find\r\n        in terms of relevance to your search that will be highlighted in purple in the results list, with directions on how to get\r\n        there. With any luck, you'll have no strong feelings one way or the\r\n        other!\r\n      </p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Intro\r\n","import React, { Component } from 'react'\r\nimport Axios from 'axios'\r\nimport Form from './Form.js'\r\nimport Map from './Map.js'\r\nimport Locations from './Locations.js'\r\nimport Directions from './Directions.js'\r\nimport GeolocationLoading from './GeolocationLoading'\r\nimport Intro from './IntroDescription.js'\r\nimport './App.css'\r\n\r\nclass App extends Component {\r\n  constructor () {\r\n    super()\r\n\r\n    this.APIKEY = process.env.REACT_APP_API_KEY\r\n    this.displayNone = { display: 'none' }\r\n    this.displayShow = { display: 'block' }\r\n    this.locationListRef = React.createRef()\r\n\r\n    // set initial location (blank)\r\n    this.state = {\r\n      base: '',\r\n      usingCurrent: false,\r\n      searchTerm: '',\r\n      range: 10000,\r\n      baseGeoLocation: [],\r\n      searchResults: [],\r\n      mapImageURL: '',\r\n      destination: '',\r\n      highlightedLocations: [null, null],\r\n      directions: [],\r\n      areSearchResultsEmpty: false,\r\n      mapLoadingStyle: this.displayNone,\r\n      geolocationLoadingStyle: this.displayNone,\r\n      showInfo: false,\r\n      showDirections: false,\r\n      touristMode: false,\r\n      duplicateNames: {},\r\n      intro: this.displayShow\r\n    }\r\n  }\r\n\r\n  // input setter\r\n  handleInput = e => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value\r\n    })\r\n    if (e.target.name === 'range' && this.state.base && this.state.searchTerm) {\r\n      this.search()\r\n    }\r\n  }\r\n\r\n  updateSliderRange = e => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value\r\n    })\r\n  }\r\n\r\n  handleEnter = e => {\r\n    if (e.keyCode === 13) {\r\n      this.handleInput(e)\r\n    }\r\n  }\r\n\r\n  toggleTouristMode = e => {\r\n    this.setState(\r\n      {\r\n        touristMode: !this.state.touristMode\r\n      },\r\n      () => {\r\n        if (this.state.searchResults.length > 0) {\r\n          this.getLocationsMapImage()\r\n        }\r\n      }\r\n    )\r\n  }\r\n\r\n  // get and set the directions from base to destination\r\n  displayRoute = async () => {\r\n    try {\r\n      const data = await Axios.get(\r\n        'http://www.mapquestapi.com/directions/v2/route',\r\n        {\r\n          params: {\r\n            key: this.APIKEY,\r\n            from: this.state.base,\r\n            to: this.state.destination\r\n          }\r\n        }\r\n      )\r\n\r\n      const directions = data.data.route.legs[0].maneuvers.map(\r\n        steps => steps.narrative\r\n      )\r\n      this.setState({\r\n        directions\r\n      })\r\n    } catch (err) {\r\n      console.log('Cannot get route.')\r\n    }\r\n  }\r\n\r\n  // convert an array of addresses into one string of a required format\r\n  streetArrayToString = () => {\r\n    return this.state.searchResults\r\n      .reduce((result, current, index) => {\r\n        if (this.state.highlightedLocations.includes(index)) {\r\n          return result + current.address + '|flag-FFD700-meh||'\r\n        } else if (\r\n          this.state.touristMode &&\r\n          this.state.duplicateNames[current.name] > 1\r\n        ) {\r\n          return result + current.address + '|marker-93003D||'\r\n        } else {\r\n          return result + current.address + '||'\r\n        }\r\n      }, '')\r\n      .replace('#', ' ')\r\n  }\r\n\r\n  // find and set the names that appears more than once in location list\r\n  getDuplicateIndex = () => {\r\n    const duplicate = {}\r\n\r\n    for (let location of this.state.searchResults) {\r\n      duplicate[location.name] = duplicate[location.name]\r\n        ? duplicate[location.name] + 1\r\n        : 1\r\n    }\r\n\r\n    this.setState({\r\n      duplicateNames: duplicate\r\n    })\r\n  }\r\n\r\n  // using the navigator object, fetch user's browser location\r\n  getCurrentLocation = () => {\r\n    this.setState({\r\n      usingCurrent: !this.state.usingCurrent\r\n    })\r\n\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(position => {\r\n        this.setState({\r\n          baseGeoLocation: [\r\n            position.coords.latitude,\r\n            position.coords.longitude\r\n          ]\r\n        })\r\n        // convert the lat and lng to an address\r\n        this.reverseGeo(\r\n          `${position.coords.latitude},${position.coords.longitude}`\r\n        )\r\n      })\r\n    } else {\r\n      alert('Geolocation is not supported by this browser.')\r\n    }\r\n  }\r\n\r\n  // set destination to the address selected and display the route map from base to destination\r\n  setDestination = address => {\r\n    this.setState(\r\n      {\r\n        destination: address,\r\n        showDirections: true\r\n      },\r\n      () => {\r\n        this.getRouteMapImage()\r\n        this.displayRoute()\r\n      }\r\n    )\r\n  }\r\n\r\n  // Given an address, convert the address to [lat, lng] and store it in baseGeoLocation\r\n  geoLocation = async location => {\r\n    try {\r\n      const data = await Axios.get(\r\n        'http://www.mapquestapi.com/geocoding/v1/address',\r\n        {\r\n          params: {\r\n            key: this.APIKEY,\r\n            location: location\r\n          }\r\n        }\r\n      )\r\n\r\n      const { lat, lng } = data.data.results[0].locations[0].latLng\r\n      this.setState({\r\n        baseGeoLocation: [lat, lng]\r\n      })\r\n    } catch (err) {\r\n      console.log('Cannot get geo location.')\r\n    }\r\n  }\r\n\r\n  // Given a string in the form of 'lat,lng' representing a lat and lng, covert it to\r\n  // an address and store it in base\r\n  reverseGeo = async location => {\r\n    // only fire when the using current location checkbox is checked\r\n    if (this.state.usingCurrent === true) {\r\n      // When attempting to find address automatically using browser geolocation, display loading popup\r\n      this.setState({\r\n        geolocationLoadingStyle: this.displayShow\r\n      })\r\n\r\n      try {\r\n        const data = await Axios.get(\r\n          'http://www.mapquestapi.com/geocoding/v1/reverse',\r\n          {\r\n            params: {\r\n              key: this.APIKEY,\r\n              location: location\r\n            }\r\n          }\r\n        )\r\n\r\n        // save the result of the reverse lookup, and then parse out the address and save it into state\r\n        const reverseAddressResult = data.data.results[0].locations[0]\r\n\r\n        this.setState({\r\n          base:\r\n            reverseAddressResult.street +\r\n            ', ' +\r\n            reverseAddressResult.adminArea5 +\r\n            ', ' +\r\n            reverseAddressResult.adminArea3,\r\n          geolocationLoadingStyle: this.displayNone\r\n        })\r\n      } catch (err) {\r\n        alert('An error occured finding your address automatically.')\r\n        this.setState({\r\n          geolocationLoadingStyle: this.displayNone\r\n        })\r\n      }\r\n    } // closing bracket for if statement\r\n  }\r\n\r\n  // search a place of interest and display a list of the results as well as a map\r\n  // marking said results\r\n  search = async e => {\r\n    if (e) {\r\n      e.preventDefault()\r\n    }\r\n\r\n    this.setState({\r\n      directions: []\r\n    })\r\n\r\n    try {\r\n      // convert address entered into geo location\r\n      await this.geoLocation(this.state.base)\r\n\r\n      let data = await Axios.get(\r\n        'https://www.mapquestapi.com/search/v4/place',\r\n        {\r\n          params: {\r\n            key: this.APIKEY,\r\n            sort: 'relevance',\r\n            circle: `${this.state.baseGeoLocation[1]}, ${\r\n              this.state.baseGeoLocation[0]\r\n            }, ${this.state.range}`,\r\n            q: this.state.searchTerm,\r\n            pageSize: 50\r\n          }\r\n        }\r\n      )\r\n\r\n      // convert the results array into an array of objects each containing the name and address of a location\r\n      const results = data.data.results.map(location => {\r\n        return {\r\n          name: location.name,\r\n          address: location.displayString.slice(location.name.length + 2)\r\n        }\r\n      })\r\n\r\n      // Do a check to see if any results are found, and if so, set a search results empty flag.\r\n      if (results.length === 0) {\r\n        this.setState({\r\n          areSearchResultsEmpty: true\r\n        })\r\n      } else {\r\n        this.setState({\r\n          areSearchResultsEmpty: false\r\n        })\r\n      }\r\n\r\n      // Find the most \"average\" location... aka highlight the middle result (or middle two results in the event of an even number of results)\r\n      let highlightedLocations = [null, null]\r\n\r\n      if (results.length % 2 === 0) {\r\n        highlightedLocations = [results.length / 2 - 1, results.length / 2]\r\n      } else {\r\n        highlightedLocations = [Math.floor(results.length / 2)]\r\n      }\r\n\r\n      this.setState({\r\n        searchResults: results,\r\n        highlightedLocations: highlightedLocations,\r\n        showInfo: true,\r\n        intro: this.displayNone\r\n      })\r\n\r\n      this.locationListRef.current.scrollIntoView({\r\n        behavior: 'smooth',\r\n        block: 'nearest'\r\n      })\r\n\r\n      this.getDuplicateIndex()\r\n      this.getLocationsMapImage()\r\n    } catch (err) {\r\n      alert('Cannot perform search. An error has occured.')\r\n    }\r\n  }\r\n\r\n  // get and set the locations map image url\r\n  getLocationsMapImage = async () => {\r\n    // Set the map loading div to show up\r\n    this.setState({\r\n      mapLoadingStyle: this.displayShow\r\n    })\r\n\r\n    try {\r\n      const data = await Axios({\r\n        method: 'GET',\r\n        url: 'https://www.mapquestapi.com/staticmap/v5/map',\r\n        responseType: 'blob',\r\n        params: {\r\n          key: this.APIKEY,\r\n          locations:\r\n            this.streetArrayToString() + this.state.base + '|flag-start',\r\n          scalebar: 'true|bottom',\r\n          shape: `radius:${this.state.range / 1000}km` + '|' + this.state.base,\r\n          size: '800,800'\r\n        }\r\n      })\r\n      this.setState({\r\n        mapImageURL: URL.createObjectURL(data.data),\r\n        // hide the map loading div once the API request goes through\r\n        mapLoadingStyle: this.displayNone\r\n      })\r\n    } catch (err) {\r\n      alert('Cannot generate locations map.')\r\n      this.setState({\r\n        mapLoadingStyle: this.displayNone\r\n      })\r\n    }\r\n  }\r\n\r\n  // get and set the route map image url\r\n  getRouteMapImage = async () => {\r\n    // Set the map loading div to show up\r\n    this.setState({\r\n      mapLoadingStyle: {\r\n        display: 'block'\r\n      }\r\n    })\r\n    try {\r\n      const data = await Axios({\r\n        method: 'GET',\r\n        url: 'https://www.mapquestapi.com/staticmap/v5/map',\r\n        responseType: 'blob',\r\n        params: {\r\n          key: this.APIKEY,\r\n          start: this.state.base + '|flag-start',\r\n          end: this.state.destination + '|flag-end',\r\n          scalebar: 'true|bottom',\r\n          size: '800,800'\r\n        }\r\n      })\r\n      this.setState({\r\n        mapImageURL: URL.createObjectURL(data.data),\r\n        // hide the map loading div once the API request goes through\r\n        mapLoadingStyle: {\r\n          display: 'none'\r\n        }\r\n      })\r\n    } catch (err) {\r\n      alert('Cannot generate route map.')\r\n    }\r\n  }\r\n\r\n  componentDidUpdate () {\r\n    // Do the below as long as the search results aren't zero.\r\n    if (this.state.searchResults.length > 0) {\r\n      // Find which button is highlighted for the most 'average' location, aka the middle of the list\r\n      let highlightButtonElement = document.getElementById(\r\n        'button-highlight-id'\r\n      )\r\n\r\n      // Since the highlighted button is scrolled just past the top of the div, subtract the button height times 4 (seemed like a good value when tested) to push the scroll back to where we can see the highlighted buttons\r\n      let topOffset =\r\n        highlightButtonElement.offsetTop -\r\n        highlightButtonElement.offsetHeight * 8\r\n\r\n      // set the scroll of the location list div to the above values.\r\n      document.getElementById('location-list-id').scrollTop = topOffset\r\n    }\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div className='wrapper'>\r\n        <div className='App'>\r\n          <header>\r\n            <h1>Average Joe<span>😐</span></h1>\r\n          </header>\r\n\r\n          <Intro style={this.state.intro} />\r\n          <div className='form-contact-contain'>\r\n            <div className='form-container'>\r\n              <Form\r\n                search={this.search}\r\n                base={this.state.base}\r\n                usingCurrent={this.state.usingCurrent}\r\n                range={this.state.range}\r\n                handleInput={this.handleInput}\r\n                handleEnter={this.handleEnter}\r\n                updateSliderRange={this.updateSliderRange}\r\n                getCurrentLocation={this.getCurrentLocation}\r\n                searchTerm={this.state.searchTerm}\r\n                toggleTouristMode={this.toggleTouristMode}\r\n              />\r\n              <GeolocationLoading style={this.state.geolocationLoadingStyle} />\r\n            </div>\r\n            {this.state.showInfo ? (\r\n              <div className='content-container' ref={this.locationListRef}>\r\n                <div className='map-and-locations'>\r\n                  <Locations\r\n                    setDestination={this.setDestination}\r\n                    searchResults={this.state.searchResults}\r\n                    highlightedLocations={this.state.highlightedLocations}\r\n                    touristMode={this.state.touristMode}\r\n                    duplicateNames={this.state.duplicateNames}\r\n                    areSearchResultsEmpty={this.state.areSearchResultsEmpty}\r\n                  />\r\n\r\n                  <Map\r\n                    url={this.state.mapImageURL}\r\n                    style={this.state.mapLoadingStyle}\r\n                    touristMode={this.state.touristMode}\r\n                  />\r\n                </div>\r\n\r\n                {this.state.showDirections ? (\r\n                  this.state.directions.length > 0 ? (\r\n                    <Directions directions={this.state.directions} />\r\n                  ) : null\r\n                ) : null}\r\n              </div>\r\n            ) : null}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n)\r\n\r\nexport function register (config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config)\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          )\r\n        })\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction registerValidSW (swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing\r\n        if (installingWorker == null) {\r\n          return\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              )\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration)\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.')\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error)\r\n    })\r\n}\r\n\r\nfunction checkValidServiceWorker (swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type')\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload()\r\n          })\r\n        })\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      )\r\n    })\r\n}\r\n\r\nexport function unregister () {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister()\r\n    })\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}